<policies>
    <inbound>
        <base />
        <rate-limit-by-key calls="10" renewal-period="60" counter-key="@(context.Subscription.Id)" />
        <!--<set-header name="api-key" exists-action="override">
            <value>{{OpenAI-Key}}</value>
        </set-header>
        <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized" require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true" clock-skew="0">
        </validate-jwt>-->
        <set-variable name="gpt4" value="@(Convert.ToBoolean(context.Request.Url.Path.Contains("gpt-4")))" />
        <retry condition="@(context.Response.StatusCode == 500)" count="10" interval="10" max-interval="100" delta="10" first-fast-retry="false">
            <cache-lookup-value variable-name="backendIndexStr" key="backendIndex" default-value="1" caching-type="prefer-external" />
            <set-variable name="backendIndex" value="@(Convert.ToInt32(context.Variables["backendIndexStr"]))" />
            <trace source="Variables" severity="verbose">
                <message>Variables</message>
                <metadata name="gpt4" value="@(((bool)context.Variables["gpt4"]).ToString())" />
                <metadata name="backendIndex" value="@(((int)context.Variables["backendIndex"]).ToString())" />
                <metadata name="subscriptionId" value="@(context.Subscription.Id)" />
                <metadata name="subscriptionName" value="@(context.Subscription.Name)" />
                <metadata name="subscriptionKey" value="@(context.Subscription.Key)" />
                <metadata name="subscriptionStartDate" value="@(context.Subscription.StartDate.ToString())" />
            </trace>
            <set-variable name="backend-id" value="openaione" />
            <choose>
                <when condition="@((bool)context.Variables["gpt4"] == false)">
                    <!-- USE GPT 3 TURBO Service -->
                    <choose>
                        <when condition="@((int)context.Variables["backendIndex"] == 1)">
                            <set-variable name="backend-id" value="openaione" />
                        </when>
                        <when condition="@((int)context.Variables["backendIndex"] == 2)">
                            <set-variable name="backend-id" value="openaitwo" />
                        </when>
                        <when condition="@((int)context.Variables["backendIndex"] == 3)">
                            <set-variable name="backend-id" value="openaithree" />
                        </when>
                    </choose>
                </when>
                <otherwise>
                    <!-- USE GPT 4 Service -->
                    <set-variable name="backend-id" value="openaifour" />
                </otherwise>
            </choose>
            <set-backend-service backend-id="@((string)context.Variables["backend-id"])" />
            <cache-store-value key="backendIndex" value="@{
                int backendIndex = (int)context.Variables["backendIndex"] + 1;
                return (backendIndex < 4) ? backendIndex : 1;
            }" duration="100000" caching-type="prefer-external" />
            <!-- can use modulo (%) instead -->
        </retry>
    </inbound>
    <backend>
        <!-- this base policy is a MUST - it uses forward-request, if being replaced with another - use forward-request -->
        <base />
        <!-- <forward-request />-->
    </backend>
    <outbound>
        <base />
        <return-response>
            <set-status code="@(context.Response.StatusCode)" reason="@(context.Response.StatusReason)" />
            <set-body>@{
                JObject responseBody = context.Response.Body.As<JObject>(preserveContent: true);
                if(null != context.Subscription)
                {
                    responseBody["subscription_id"] = context.Subscription.Id;
                    responseBody["subscription_name"] = context.Subscription.Name;
                }
                responseBody["backend_id"] = (string)context.Variables["backend-id"];
                responseBody["user"] = JObject.FromObject(context.User);


                return responseBody.ToString();
			}</set-body>
        </return-response>
    </outbound>
    <on-error>
        <!-- MUST create a new request forward-request is not allowed in this section -->
        <base />
        <retry condition="@(context.Variables["response"] == null || ((IResponse)context.Variables["response"]).StatusCode >= 500)" count="3" interval="1" first-fast-retry="true">
            <send-request mode="copy" response-variable-name="response" timeout="30" ignore-error="false">
                <set-url>@("https://openaione.openai.azure.com/openai/" + context.Request.Url.Path)</set-url>
                <set-method>POST</set-method>
            </send-request>
        </retry>
    </on-error>
</policies>