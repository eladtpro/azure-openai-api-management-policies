<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<rate-limit-by-key calls="5" renewal-period="60" counter-key="@(context.Subscription.Id)" />
		<!--<set-header name="api-key" exists-action="override">
            <value>{{OpenAI-Key}}</value>
        </set-header>
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>-->
		<set-variable name="roundRobin" value="@(Convert.ToBoolean(context.Request.Url.Query.GetValueOrDefault("UseRoundRobin")))" />
		<retry condition="@(context.Response.StatusCode == 500)" count="10" interval="10" max-interval="100" delta="10" first-fast-retry="false">
			<cache-lookup-value variable-name="backendIndexStr" key="backendIndex" default-value="1" caching-type="prefer-external" />
			<set-variable name="backendIndex" value="@(Convert.ToInt32(context.Variables["backendIndexStr"]))" />
			<trace source="Variables" severity="verbose">
				<message>Variables</message>
				<metadata name="roundRobin" value="@(((bool)context.Variables["roundRobin"]).ToString())" />
				<metadata name="backendIndex" value="@(((int)context.Variables["backendIndex"]).ToString())" />
				<metadata name="subscriptionId" value="@(context.Subscription.Id)" />
				<metadata name="subscriptionName" value="@(context.Subscription.Name)" />
				<metadata name="subscriptionKey" value="@(context.Subscription.Key)" />
				<metadata name="subscriptionStartDate" value="@(context.Subscription.StartDate.ToString())" />
			</trace>
			<choose>
				<when condition="@((bool)context.Variables["roundRobin"])">
					<choose>
						<when condition="@((int)context.Variables["backendIndex"] == 1)">
							<set-backend-service backend-id="openaione1" />
						</when>
						<when condition="@((int)context.Variables["backendIndex"] == 2)">
							<set-backend-service backend-id="openaitwo" />
						</when>
						<when condition="@((int)context.Variables["backendIndex"] == 3)">
							<set-backend-service backend-id="openaithree" />
						</when>
						<otherwise>
							<set-backend-service backend-id="openaione1" />
						</otherwise>
					</choose>
				</when>
				<otherwise>
					<!-- DO NOTHING (use the default backend) -->
					<set-backend-service backend-id="openaione1" />
				</otherwise>
			</choose>
			<cache-store-value key="backendIndex" value="@{
                int backendIndex = (int)context.Variables["backendIndex"] + 1;
                return (backendIndex < 4) ? backendIndex : 1;
            }" duration="100000" caching-type="prefer-external" />
			<!-- can use modulo (%) instead -->
		</retry>
	</inbound>
	<backend>
		<!-- this base policy is a MUST - it uses forward-request, if being replaced with another - use forward-request -->
		<base />
		<!-- <forward-request />-->
	</backend>
	<outbound>
		<base />
		<return-response>
			<set-status code="@(context.Response.StatusCode)" reason="@(context.Response.StatusReason)" />
			<set-body>@{
					JObject responseBody = context.Response.Body.As<JObject>(preserveContent: true);
					responseBody["subcription"] = JObject.FromObject(context.Subscription);
					return responseBody.ToString();
				}
			</set-body>
		</return-response>
	</outbound>
	<on-error>
		<!-- MUST create a new request forward-request is not allowed in this section -->
		<base />
		<retry condition="@(context.Variables["response"] == null || ((IResponse)context.Variables["response"]).StatusCode >= 500)" count="3" interval="1" first-fast-retry="true">
			<send-request mode="copy" response-variable-name="response" timeout="30" ignore-error="false">
				<set-url>@("https://openaione.openai.azure.com/openai/" + context.Request.Url.Path)</set-url>
				<set-method>POST</set-method>
			</send-request>
		</retry>
	</on-error>
</policies>